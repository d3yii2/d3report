<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3schedule\models\base;


use d3yii2\d3schedule\models\ScheduleTask;
use Yii;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\db\Exception;

/**
 * This is the base-model class for table "schedule_subscriber".
 *
 * @property integer $id
 * @property integer $schedule_id
 * @property string $format
 * @property integer $type_id
 * @property string $type_record_id
 * @property string $status
 *
 * @property \d3yii2\d3schedule\models\scheduleHistory[] $scheduleHistories
 * @property ScheduleTask[] $scheduleSchedules
 * @property ScheduleTask $schedule
 * @property \d3yii2\d3schedule\models\scheduleSubscryberType $type
 * @property string $aliasModel
 */
abstract class ScheduleSubscriber extends ActiveRecord
{



    /**
    * ENUM field values
    */
    public const FORMAT_FILE = 'File';
    public const FORMAT_EMAIL = 'Email';
    public const STATUS_ACTIVE = 'Active';
    public const STATUS_DISABLED = 'Disabled';
    /**
     * @inheritdoc
     */
    public static function tableName(): string
    {
        return 'schedule_subscriber';
    }


    /**
     * @inheritdoc
     */
    public function rules(): array
    {
        return [
            [['schedule_id', 'format', 'type_id'], 'required'],
            [['schedule_id', 'type_id', 'type_record_id'], 'integer'],
            [['format', 'status'], 'string'],
            [['schedule_id'], 'exist', 'skipOnError' => true, 'targetClass' => ScheduleTask::class, 'targetAttribute' => ['schedule_id' => 'id']],
            [['type_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3schedule\models\ScheduleSubscryberType::class, 'targetAttribute' => ['type_id' => 'id']],
            ['format', 'in', 'range' => [
                    self::FORMAT_FILE,
                    self::FORMAT_EMAIL,
                ]
            ],
            ['status', 'in', 'range' => [
                    self::STATUS_ACTIVE,
                    self::STATUS_DISABLED,
                ]
            ],
            [['type_id'],'integer' ,'min' => 0 ,'max' => 255],
            [['id','schedule_id'],'integer' ,'min' => 0 ,'max' => 65535],
            [['type_record_id'],'integer' ,'min' => 0 ,'max' => 4294967295]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d3schedule', 'ID'),
            'schedule_id' => Yii::t('d3schedule', 'schedule'),
            'format' => Yii::t('d3schedule', 'Format'),
            'type_id' => Yii::t('d3schedule', 'Type'),
            'type_record_id' => Yii::t('d3schedule', 'Record'),
            'status' => Yii::t('d3schedule', 'Status'),
        ];
    }

    /**
     * @return ActiveQuery
     */
    public function getscheduleHistories()
    {
        return $this->hasMany(\d3yii2\d3schedule\models\ScheduleHistory::class, ['subscriber_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getscheduleSchedules()
    {
        return $this->hasMany(ScheduleTask::class, ['subscriber_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getschedule()
    {
        return $this->hasOne(ScheduleTask::class, ['id' => 'schedule_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getType()
    {
        return $this->hasOne(\d3yii2\d3schedule\models\ScheduleSubscryberType::class, ['id' => 'type_id']);
    }


    /**
     * @return \d3yii2\d3schedule\models\scheduleHistory
     * @throws Exception
     */
    public function newScheduleHistories()
    {
        if ($this->getIsNewRecord()){
            throw new Exception('Can not create new related record for new record!');
        }
        $model = new \d3yii2\d3schedule\models\scheduleHistory();
        $model->subscriber_id = $this->id;
        return $model;
    }

    /**
     * @return \d3yii2\d3schedule\models\ScheduleSchedule
     * @throws Exception
     */
    public function newScheduleSchedules()
    {
        if ($this->getIsNewRecord()){
            throw new Exception('Can not create new related record for new record!');
        }
        $model = new \d3yii2\d3schedule\models\ScheduleSchedule();
        $model->subscriber_id = $this->id;
        return $model;
    }


    /**
     * get column format enum value label
     * @param string $value
     * @return string
     */
    public static function getFormatValueLabel($value): string
    {
        $labels = self::optsFormat();
        return $labels[$value] ?? $value;
    }

    /**
     * column format ENUM value labels
     * @return array
     */
    public static function optsFormat(): array
    {
        return [
            self::FORMAT_FILE => Yii::t('d3schedule', self::FORMAT_FILE),
            self::FORMAT_EMAIL => Yii::t('d3schedule', self::FORMAT_EMAIL),
        ];
    }

    /**
     * get column status enum value label
     * @param string $value
     * @return string
     */
    public static function getStatusValueLabel($value): string
    {
        $labels = self::optsStatus();
        return $labels[$value] ?? $value;
    }

    /**
     * column status ENUM value labels
     * @return array
     */
    public static function optsStatus(): array
    {
        return [
            self::STATUS_ACTIVE => Yii::t('d3schedule', self::STATUS_ACTIVE),
            self::STATUS_DISABLED => Yii::t('d3schedule', self::STATUS_DISABLED),
        ];
    }
}
